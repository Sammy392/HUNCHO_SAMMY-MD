// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ IMPORTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const os = require("os");
const moment = require("moment-timezone");
const config = require("../config");
const { cmd, commands } = require("../command");
const { getPrefix } = require("../lib/prefix");

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const stylizeText = (txt) => {
  const fontMap = {
    A: "·¥Ä", B: " ô", C: "·¥Ñ", D: "·¥Ö", E: "·¥á", F: "“ì", G: "…¢", H: " ú",
    I: "…™", J: "·¥ä", K: "·¥ã", L: " ü", M: "·¥ç", N: "…¥", O: "·¥è", P: "·¥ò",
    Q: "«´", R: " Ä", S: "Íú±", T: "·¥õ", U: "·¥ú", V: "·¥†", W: "·¥°", X: "x",
    Y: " è", Z: "·¥¢"
  };
  return [...txt].map(c => fontMap[c.toUpperCase()] || c).join("");
};

const tidyCategory = (name) =>
  name.toLowerCase().replace(/\s+menu$/, "").trim();

const categoryIcons = {
  ai: "ü§ñ", anime: "üç•", audio: "üéß", bible: "üìñ",
  download: "‚¨áÔ∏è", downloader: "üì•", fun: "üéÆ", game: "üïπÔ∏è",
  group: "üë•", img_edit: "üñåÔ∏è", info: "‚ÑπÔ∏è", information: "üß†",
  logo: "üñºÔ∏è", main: "üè†", media: "üéûÔ∏è", menu: "üìú", misc: "üì¶",
  music: "üéµ", other: "üìÅ", owner: "üëë", privacy: "üîí",
  search: "üîé", settings: "‚öôÔ∏è", sticker: "üåü", tools: "üõ†Ô∏è",
  user: "üë§", utilities: "üß∞", utility: "üßÆ", wallpapers: "üñºÔ∏è",
  whatsapp: "üì±"
};

const formatRuntime = () => {
  const total = process.uptime();
  const h = Math.floor(total / 3600);
  const m = Math.floor((total % 3600) / 60);
  const s = Math.floor(total % 60);
  return `${h}h ${m}m ${s}s`;
};

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ COMMAND ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cmd(
  {
    pattern: "menu",
    alias: ["allmenu"],
    desc: "Show all bot commands",
    category: "menu",
    react: "üëå",
    filename: __filename
  },

  async (conn, mek, m, { from, sender, reply }) => {
    try {
      const prefix = getPrefix();
      const tz = config.TIMEZONE || "Africa/Nairobi";
      const now = moment().tz(tz);

      // ‚îÄ‚îÄ Header
      let caption = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶
‚îÇ   üöÄ ${stylizeText("HUNCHO")}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶

üë§ *User:* @${sender.split("@")[0]}
üïí *Uptime:* ${formatRuntime()}
‚öôÔ∏è *Mode:* ${config.MODE}
üîë *Prefix:* ${config.PREFIX}
üëë *Owner:* ${config.OWNER_NAME}
üì¶ *Plugins:* ${commands.length}
üíª *Developer:* ·¥ò·¥è·¥ò·¥ã…™·¥Ö
üÜö *Version:* 2.0.0
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

      // ‚îÄ‚îÄ Group Commands
      const grouped = {};
      for (let c of commands) {
        if (!c.pattern || !c.category || c.dontAdd) continue;
        const clean = tidyCategory(c.category);
        grouped[clean] = grouped[clean] || [];
        grouped[clean].push(c.pattern.split("|")[0]);
      }

      // ‚îÄ‚îÄ Add Categories
      Object.keys(grouped)
        .sort()
        .forEach((cat) => {
          const icon = categoryIcons[cat] || "üìÇ";
          caption += `\n\nüìÇ [${icon} ${stylizeText(cat)} ${stylizeText("Menu")}]\n`;
          grouped[cat].sort().forEach((cmd) => {
            caption += `  ‚Ä¢ ${prefix}${cmd}\n`;
          });
        });

      // ‚îÄ‚îÄ Footer
      caption += `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ú® ${config.DESCRIPTION || stylizeText("Explore the bot commands and enjoy üöÄ")}`;

      const ctxInfo = {
        mentionedJid: [sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid:
            config.NEWSLETTER_JID || "120363418305362813@newsletter",
          newsletterName: config.OWNER_NAME || stylizeText("HUNCHO"),
          serverMessageId: 143
        }
      };

      // ‚îÄ‚îÄ Send Menu
      await conn.sendMessage(
        from,
        {
          image: {
            url:
              config.MENU_IMAGE_URL ||
              "https://files.catbox.moe/tbdd5d.jpg"
          },
          caption,
          contextInfo: ctxInfo
        },
        { quoted: mek }
      );

      // ‚îÄ‚îÄ Optional Audio
      if (config.MENU_AUDIO_URL) {
        await new Promise((r) => setTimeout(r, 1000));
        await conn.sendMessage(
          from,
          {
            audio: { url: config.MENU_AUDIO_URL },
            mimetype: "audio/mp4",
            ptt: true,
            contextInfo: ctxInfo
          },
          { quoted: mek }
        );
      }
    } catch (err) {
      console.error("Menu Error:", err.message);
      await reply(
        `‚ùå ${stylizeText("Error")}: Failed to show menu.\n${stylizeText(
          "Details"
        )}: ${err.message}`
      );
    }
  }
);
