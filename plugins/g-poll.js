const { cmd } = require('../command');
const config = require('../config');
const moment = require('moment-timezone');

cmd({
    pattern: 'poll',
    category: 'group',
    desc: 'Create a poll with a question and options in the group',
    react: 'üìä',
    filename: __filename,
    usage: `${config.PREFIX}poll question;option1,option2,option3... [|multiple]`
}, async (cmd, mek, m, { from, isGroup, sender, reply, isOwner }) => {
    try {
        if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs");

        // Fetch group metadata
        const groupMetadata = await cmd.groupMetadata(from);
        const participants = groupMetadata.participants;
        const isSenderAdmin = participants.some(p => p.id === sender && p.admin);
        const isBotAdmin = participants.some(p => p.id === cmd.user.id && p.admin);

        if (!isBotAdmin) return reply("‚ùå …™ …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥ò·¥è ü üs");
        if (!isSenderAdmin && !isOwner) {
            return reply("‚ùå ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö");
        }

        // Parse input
        const [questionPart, ...rest] = m.body.split(';');
        const optionsString = rest.join(';').split('|')[0]; // Handle multiple semicolons
        const isMultiple = m.body.includes('|multiple');
        const question = questionPart.replace(new RegExp(`^${config.PREFIX}poll\\s+`), '').trim();

        if (!question || !optionsString) {
            return reply(
                `‚ï≠‚îÄ‚îÄ„Äî ü§ñ *·¥ò·¥è ü ü* „Äï‚îÄ‚îÄ\n` +
                `‚îÇ\n` +
                `‚îÇ üìú *·¥ús·¥Ä…¢·¥á:*\n` +
                `‚îÇ ‚û∏ ${config.PREFIX}poll question;option1,option2,option3... [|multiple]\n` +
                `‚îÇ\n` +
                `‚îÇ üí° *·¥áx·¥Ä·¥ç·¥ò ü·¥á:*\n` +
                `‚îÇ ‚û∏ ${config.PREFIX}poll Favorite color?;Red,Blue,Green\n` +
                `‚îÇ ‚û∏ ${config.PREFIX}poll Best time?;Morning,Evening|multiple\n` +
                `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
            );
        }

        // Parse and validate options
        const options = optionsString.split(',').map(opt => opt.trim()).filter(opt => opt !== '');
        if (options.length < 2) return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä·¥õ  ü·¥á·¥Äs·¥õ ·¥õ·¥°·¥è ·¥è·¥ò·¥õ…™·¥è…¥s");
        if (options.length > 12) return reply("‚ùå ·¥õ·¥è·¥è ·¥ç·¥Ä…¥ è ·¥è·¥ò·¥õ…™·¥è…¥s (·¥ç·¥Äx 12)");
        if (question.length > 300) return reply("‚ùå ·¥è·¥ú·¥ás·¥õ…™·¥è…¥ ·¥õ·¥è·¥è  ü·¥è…¥…¢ (·¥ç·¥Äx 300 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs)");
        if (options.some(opt => opt.length > 100)) return reply("‚ùå ·¥è…¥·¥á ·¥è Ä ·¥ç·¥è Ä·¥á ·¥è·¥ò·¥õ…™·¥è…¥s ·¥õ·¥è·¥è  ü·¥è…¥…¢ (·¥ç·¥Äx 100 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs ·¥á·¥Ä·¥Ñ ú)");

        // Create poll
        await cmd.sendMessage(from, {
            poll: {
                name: question,
                values: options,
                selectableCount: isMultiple ? 0 : 1, // 0 allows multiple selections
                toAnnouncementGroup: config.POLL_TO_ANNOUNCEMENT || false
            },
            contextInfo: {
                forwardingScore: 999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: config.NEWSLETTER_JID || '120363420342566562@newsletter',
                    newsletterName: config.OWNER_NAME || 'POPKID KE',
                    serverMessageId: 143
                }
            }
        }, { quoted: mek });

        // Send confirmation
        const timestamp = moment().tz(config.TIMEZONE || 'Africa/Harare').format('DD/MM/YYYY HH:mm:ss');
        await reply(
            `‚ï≠‚îÄ‚îÄ„Äî„Äî ü§ñ *·¥ò·¥è ü ü* „Äï‚îÄ‚îÄ\n` +
            `‚îÇ\n` +
            `‚îÇ ‚úÖ *s·¥ú·¥Ñ·¥Ñ·¥áss*\n` +
            `‚îÇ ‚û∏ ·¥ò·¥è ü ü ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö: "${question}"\n` +
            `‚îÇ ‚è∞ *·¥õ…™·¥ç·¥á*: ${timestamp}\n` +
            `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
        );

    } catch (error) {
        console.error('‚ùå Poll command error:', error.message);
        let errorMsg = '‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥ò·¥è ü ü.';
        if (error.message.includes('not-authorized')) {
            errorMsg += ' …™…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s.';
        } else if (error.message.includes('invalid')) {
            errorMsg += ' …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ò·¥è ü ü ·¥Ö·¥Ä·¥õ·¥Ä.';
        } else {
            errorMsg += ' ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.';
        }
        await reply(errorMsg);
    }
});
